<% include header.ejs %>
<div class="row my-1 mx-3">
  <div class="col-md-12">
    <h2 class="text-center "> Welcome to the ChatsApp,
      <%= locals.username %> ... </h2>
  </div>
</div>
<div class="d-flex" id="wrapper">
  <!-- SIDEBAR -->
  <div class="bg-light border-right" id="sidebar-wrapper">
    <div class="sidebar-heading"> ROOMS & USERS </div>
    <div class="list-group list-group-flush">
      <a href="#broadcast" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="broadcast" class="list-group-item list-group-item-action bg-light
        font-weight-bold ancTags">
        Broadcast Room 
        <span class="badge badge-pill badge-success newMessage hideUser" onclick="checkMsg()">New</span></a>
      <% for (let i=0; i < locals.users.length; i++) { %>
      <a href="#<%=locals.users[i].username%>" data-toggle="collapse" role="button" aria-expanded="false"
        aria-controls="<%=locals.users[i].username%>" class="list-group-item list-group-item-action
            bg-light userlist ancTags" data-username="<%=locals.users[i].username%>" data-socket="" onclick="check()">
        <button type="button" class="btn btn-default
            btn-circle status"></button>
        <%= locals.users[i].username %>
        <span class="badge badge-pill badge-success newMessage hideUser" onclick="checkMsg()">New</span></a>
      <% } %>
    </div>
  </div>
  <!-- MAIN CONTENT -->
  <div id="page-content-wrapper">
    <button class="btn btn-secondary mb-3 mt-2
          mx-2 btn-sm" id="menu-toggle"><i class="fas fa-sliders-h"> Userlist </i></button>
    <!-- BROADCAST CHAT -->
    <div class="container-fluid collapse" id="broadcast">
      <!-- CHAT WINDOW -->
      <div class="card card-body">
        <div class="chat-window" id="tryy">
          <div class="chat-output"></div>
          <div class="typing"></div>
          <div class="notification"></div>
        </div>
        <input class="chat-message" type="text" placeholder="Message" required />
        <button class="chat-send">Send</button>
      </div>
    </div>
    <!-- PRIVATE CHAT -->
    <% for (let i=0; i <users.length; i++) { %>
    <div class="container-fluid collapse
            private" id="<%=users[i].username%>" data-socket="">
      <div class="card card-body">
        <div class="chat-window">
          <div class="chat-output">
          </div>
        </div>
        <input class="chat-message" type="text" placeholder="Message" />
        <button class="chat-send">Send</button>
      </div>
    </div>
    <% } %>
  </div>
</div>

<% include footer.ejs %>
<script src="/socket.io/socket.io.js"></script>
<script>
  let clicked;
  $('.collapse').on('show.bs.collapse', function (e) {
    $('.collapse').each(function () {
      $(this).collapse('hide');
    });
    clicked = $(e.target).attr('id');
  });

  $('.ancTags').on('click', function(e) {
    
    $('.ancTags').each(function () {
      if(this !== e.target) {
      $(this).removeClass('active');
      }
    })
    $(e.target).toggleClass('active');
    
  })

  $('.collapse').on('hide.bs.collapse', function (e) {
    clicked = '';
  })

  $('#menu-toggle').click(function (e) {
    e.preventDefault();
    $('#wrapper').toggleClass('toggled');
  });

  // Make Connection between Client and Server
  // const socket = io.connect('http://ec6ce5f0.ngrok.io');
  const socket = io.connect('http://localhost:3000');

  // Get elements from DOM
  const sender = '<%=locals.username%>';
  const outputB = $('#broadcast').find('.chat-output');
  const messageB = $('#broadcast').find('.chat-message');
  const sendB = $('#broadcast').find('.chat-send');
  const typingB = $('#broadcast').find('.typing');
  const notiB = $('#broadcast').find('.notification');
  // PRIVATE CHATS
  const messageP = $('.private').find('.chat-message');
  const sendP = $('.private').find('.chat-send');
  const private = $('.private');
  const newMessage = $('.newMessage');
  // To get users from sidebar
  const userlist = $('.userlist');
  // Current user
  const userInfo = {
    sender: sender,
  };

  // Hide yourself from the userlist
  function chupJao() {
    for (let i = 0; i < userlist.length; i++) {
      if (userlist[i].dataset.username.trim() == sender) {
        userlist[i].classList.add('hideUser');
      }
    }
  }

  // Emit Online Notification to other users
  socket.on('connect', () => {
    // to save our own socket id
    userInfo.socket = socket.id;
    socket.emit('newUser', userInfo);
    chupJao();
  });

  // Update already online users
  socket.on('onlineUsers', (data) => {
    for (let j = 0; j < data.length; j++) {
      for (let i = 0; i < userlist.length; i++) {
        if (userlist[i].dataset.username.trim() == data[j].sender) {
          userlist[i].querySelector('.status').classList.add('online');
          userlist[i].dataset.socket = data[j].socket;
          private[i].dataset.socket = data[j].socket;
        }
      }
    }
  });

  // Add Event Listeners and Emit Events
  function sendBM() {
    if (event instanceof MouseEvent || event.keyCode === 13) {
      if (messageB.val().trim() == '') {
        messageB.attr('placeholder', 'Message cannot be blank');
      }
      else {
        socket.emit('chat', {
          message: messageB.val(),
          sender: sender,
        });
        messageB.val('');
        messageB.attr('placeholder', 'Message');    
      }
    }
  }

  function sendPM() {
    let messageBox;
    if (event.keyCode === 13) {
      messageBox = $(this);
      callback()
    }
    else if (event instanceof MouseEvent) {
      messageBox = $(this).siblings('.chat-message');
      callback()
    }

    function callback() {
      if (messageBox.val().trim() == '') {
        messageBox.attr('placeholder', 'Message cannot be blank');
      }
      else {
        socket.emit('PM', {
          message: messageBox.val(),
          sender: userInfo.sender,
          senderId: userInfo.socket,
          sendTo: messageBox.parent('div').parent('div').attr('data-socket'),
          toUser: messageBox.parent('div').parent('div').attr('id'),
        });
        messageBox.val('');
        messageBox.attr('placeholder', 'Message');
      }
    }
  }


  sendB.bind('click', sendBM);
  messageB.bind('keyup', sendBM);
  sendP.bind('click', sendPM);
  messageP.bind('keyup', sendPM);

  // // Broadcast Typing Message
  messageB.bind('keypress', () => {
    socket.emit('typing', {
      sender: sender,
    });
  });
  function autoScroll() {
  let chatwindows = $('.chat-window');
  for(let i=0; i<chatwindows.length; i++) {
    $(".chat-window").stop().animate({ scrollTop: $(".chat-window")[i].scrollHeight}, 1000);

  }
  
}

  // // Listen to Events
  socket.on('chat', (data) => {
    typingB.html('');
    outputB.append(`<p> <strong> ${data.sender} </strong>
    ${data.message} </p>`);
   $(".chat-window").stop().animate({ scrollTop: $(".chat-window")[0].scrollHeight}, 1000);
  // autoScroll();
  });

  function check() {
    $(event.target).find('.newMessage').addClass('hideUser');
  }

  function checkMsg() {
    $(event.target).addClass('hideUser');
  }


  socket.on('PMsuccess', (data) => {
    let from;
    for (i = 0; i < userlist.length; i++) {
      if (userlist[i].dataset.username == data.sender) {
        from = '#' + userlist[i].dataset.username.trim();
        if (clicked != data.sender) {
          userlist[i].querySelector('.newMessage').classList.remove('hideUser');
        }
      }
    }
    $(from).find('.chat-output').append(`<p> 
              <strong> ${data.sender} </strong> ${data.message} </p>`);
               autoScroll();
  });

  socket.on('PMupdate', (data) => {
    let from;
    for (i = 0; i < userlist.length; i++) {
      if (userlist[i].dataset.username == data.toUser) {
        from = '#' + userlist[i].dataset.username.trim();
      }
    }
    $(from).find('.chat-output').append(`<p> 
                <strong> ${data.sender} </strong> ${data.message} </p>`);
               autoScroll();
                 });

  socket.on('PMerror', (data) => {
    let from;
    for (i = 0; i < userlist.length; i++) {
      if (userlist[i].dataset.username == data.toUser) {
        from = '#' + userlist[i].dataset.username.trim();
      }
    }
    $(from).find('.chat-output').append(`<p> 
                  <strong> Cannot send a message to offline user. </strong> </p>`);
  });

  socket.on('typing', (data) => {
    typingB.html(`<p> <em> ${data.sender} is typing a message..
                  </em> </p>`);
  });

  socket.on('newUser', (data) => {
    let oldUser;
    if(data !== '') {
      outputB.append(`<p> ${data.sender} is online`);
    for (let i = 0; i < userlist.length; i++) {
      if (userlist[i].dataset.username.trim() == data.sender) {
        userlist[i].querySelector('.status').classList.add('online');
        userlist[i].dataset.socket = data.socket;
        private[i].dataset.socket = data.socket;
        oldUser = true;
      }
    }
    if(!oldUser){
      location.reload();
    }
    }
  });

  socket.on('userLeft', (data) => {
    if (data !== 'transport close') {
      outputB.append(`<p> ${data} is offline`);
      for (let i = 0; i < userlist.length; i++) {
        if (userlist[i].dataset.username.trim() == data) {
          userlist[i].querySelector('.status').classList.remove('online');
          userlist[i].dataset.socket = '';
          private[i].dataset.socket = '';
        }
      }
    }
  });

  socket.on('multipleTabs', () => {
    window.location = '/multipleTabs';
  });


  // Send user Info when user disconnects.
  socket.on('disconnect', () => {

  });

</script>

</body>

</html>
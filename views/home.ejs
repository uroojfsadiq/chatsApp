<% include header.ejs %>

<div class="row my-2 mx-5">

</div>
<div class="d-flex" id="wrapper">
    <!-- Sidebar -->
    <div class="bg-light border-right" id="sidebar-wrapper">
        <div class="sidebar-heading"> ROOMS & USERS </div>
        <div class="list-group list-group-flush">
            <a href="#broadcast" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="broadcast"
                class="list-group-item list-group-item-action bg-light">
                Broadcast Room </a>
            <% for (let i=0; i < users.length; i++) { %>
            <a href="#private-<%=users[i].username%>" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="private"
                class="list-group-item list-group-item-action bg-light userlist" data-username="<%= users[i].username %>"
                data-socketID="">
                <button type="button" class="btn btn-default btn-circle status"></button>
                <%= users[i].username %> </a>
            <% } %>
        </div>
    </div>
    <!-- /#sidebar-wrapper -->
    <!-- Page Content -->
    <div id="page-content-wrapper">
        <button class="btn btn-secondary mb-3 mt-2 mx-2 btn-sm" id="menu-toggle"> Toggle Sidebar</button>
        <div class="container-fluid collapse" id="broadcast">
            <div class="card card-body">
                <div class="chat-window">
                    <div class="chat-output"></div>
                    <div class="typing"></div>
                    <div class="notification"></div>
                </div>

                <input class="chat-message" type="text" placeholder="Message" />
                <button class="chat-send">Send</button>
            </div>
        </div>
        <% for (let i=0; i < users.length; i++) { %>
        <div class="container-fluid collapse private" id="private-<%=users[i].username%>">
            <div class="card card-body">
                <div class="chat-window">
                    <div class="chat-output">
                        <%=users[i].username%>
                    </div>
                    <div class="typing"></div>
                    <div class="notification"></div>
                </div>
        
                <input class="chat-message" type="text" placeholder="Message" />
                <button class="chat-send">Send</button>
            </div>
        </div>
        <% } %>
    </div>

    <!-- /#page-content-wrapper -->

</div>
<!-- /#wrapper -->
<% include footer.ejs %>

<script src="/socket.io/socket.io.js"> </script>

<script>
    $('.collapse').on('show.bs.collapse', function () {
            $('.collapse').each(function () {
                $(this).collapse('hide');
            });
        });
    $("#menu-toggle").click(function (e) {
        e.preventDefault();
        $("#wrapper").toggleClass("toggled");
    });
</script>
<script>
    //Make Connection between Client and Server
    const socket = io.connect('http://localhost:3000');

    // BROADCAST ROOM ONLY

    // Get elements from DOM
    const sender = '<%=locals.username%>';
    const outputB = $('#broadcast').find('.chat-output');
    const messageB = $('#broadcast').find('.chat-message');
    const sendB = $('#broadcast').find('.chat-send');
    const typingB = $('#broadcast').find('.typing');
    const notiB = $('#broadcast').find('.notification');
    const user = $('.userlist');
    const userInfo = {
        sender: sender,
    }
    

    // Make oneself online
    function youAreOnline() {
        for (let i = 0; i < user.length; i++) {
            if (user[i].dataset.username.trim() == sender) {
                user[i].querySelector('.status').classList.add('online');
                user[i].dataset.socketID = userInfo.socketID;

            }
        }
    }

    //Add Event Listeners and Emit Events
    sendB.bind('click', () => {
        socket.emit('chat', {
            message: messageB.val(),
            sender: sender
        });
        messageB.val('');
    });

    // Enter key sends a message too
    messageB.bind('keyup', (event) => {
        if (event.keyCode === 13) {
            socket.emit('chat', {
                message: messageB.val(),
                sender: sender
            });
            messageB.val('');
        }
    });

    // // Broadcast Typing Message
    messageB.bind('keypress', () => {
        socket.emit('typing', {
            sender: sender
        });
    })

    // Emit Online Notification
    socket.on('connect', () => {
        userInfo.socketID = socket.id;
        socket.emit('newUser', userInfo);
        youAreOnline();
    })

    // Disconnect user
    socket.on('disconnect', () => {
    });


    // // Listen to Events
    socket.on('onlineUsers', (data) => {
        for (let j = 0; j < data.length; j++) {
            for (let i = 0; i < user.length; i++) {
                if (user[i].dataset.username.trim() == data[j].sender) {
                    user[i].querySelector('.status').classList.add('online');
                    user[i].dataset.socketID = data[j].socketID;
                }
            }
        }
    })

    socket.on('chat', (data) => {
        typingB.html('');
      outputB.append(`<p> <strong> ${data.sender} </strong>
      ${data.message} </p>`);
    })

    socket.on('typing', (data) => {
        typingB.html(`<p> <em> ${data.sender} is typing a message..
       </em> </p>`);
    })

    socket.on('newUser', (data) => {
        outputB.append(`<p> ${data.sender} is online`);
        for (let i = 0; i < user.length; i++) {
            if (user[i].dataset.username.trim() == data.sender) {
                user[i].querySelector('.status').classList.add('online');
                user[i].dataset.socket = data.socketID;
            }
        }
    })

    socket.on('userLeft', (data) => {
        if (data !== 'transport close') {
            outputB.append(`<p> ${data} is offline`);
            for (let i = 0; i < user.length; i++) {
                if (user[i].dataset.username.trim() == data) {
                    user[i].querySelector('.status').classList.remove('online')
                }
            }
        }
    })
</script>
</body>

</html>